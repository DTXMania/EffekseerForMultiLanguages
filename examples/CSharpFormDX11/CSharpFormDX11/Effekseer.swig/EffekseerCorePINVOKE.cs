//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Effekseer.swig {

class EffekseerCorePINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="SWIGRegisterExceptionCallbacks_EffekseerCore")]
    public static extern void SWIGRegisterExceptionCallbacks_EffekseerCore(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_EffekseerCore")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_EffekseerCore(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_EffekseerCore(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_EffekseerCore(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="SWIGRegisterStringCallback_EffekseerCore")]
    public static extern void SWIGRegisterStringCallback_EffekseerCore(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_EffekseerCore(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static EffekseerCorePINVOKE() {
  }


  protected class SWIGWStringHelper {

    public delegate string SWIGWStringDelegate(System.IntPtr message);
    static SWIGWStringDelegate wstringDelegate = new SWIGWStringDelegate(CreateWString);

    [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="SWIGRegisterWStringCallback_EffekseerCore")]
    public static extern void SWIGRegisterWStringCallback_EffekseerCore(SWIGWStringDelegate wstringDelegate);

    static string CreateWString([global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPWStr)]global::System.IntPtr cString) {
      return System.Runtime.InteropServices.Marshal.PtrToStringUni(cString);
    }

    static SWIGWStringHelper() {
      SWIGRegisterWStringCallback_EffekseerCore(wstringDelegate);
    }
  }

  static protected SWIGWStringHelper swigWStringHelper = new SWIGWStringHelper();


  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_new_EffekseerBackendCore___")]
  public static extern global::System.IntPtr new_EffekseerBackendCore();

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_delete_EffekseerBackendCore___")]
  public static extern void delete_EffekseerBackendCore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerBackendCore_GetDevice___")]
  public static extern int EffekseerBackendCore_GetDevice();

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerBackendCore_InitializeWithOpenGL___")]
  public static extern bool EffekseerBackendCore_InitializeWithOpenGL();

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerBackendCore_InitializeWithDirectX9___")]
  public static extern bool EffekseerBackendCore_InitializeWithDirectX9(global::System.IntPtr jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerBackendCore_InitializeWithDirectX11___")]
  public static extern bool EffekseerBackendCore_InitializeWithDirectX11(global::System.IntPtr jarg1, global::System.IntPtr jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerBackendCore_Terminate___")]
  public static extern void EffekseerBackendCore_Terminate();

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_new_EffekseerEffectCore___")]
  public static extern global::System.IntPtr new_EffekseerEffectCore();

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_delete_EffekseerEffectCore___")]
  public static extern void delete_EffekseerEffectCore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_Load___")]
  public static extern bool EffekseerEffectCore_Load(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_GetTexturePath___")]
  public static extern System.IntPtr EffekseerEffectCore_GetTexturePath(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_GetTextureCount___")]
  public static extern int EffekseerEffectCore_GetTextureCount(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_LoadTexture___")]
  public static extern bool EffekseerEffectCore_LoadTexture(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_HasTextureLoaded___")]
  public static extern bool EffekseerEffectCore_HasTextureLoaded(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_GetModelPath___")]
  public static extern System.IntPtr EffekseerEffectCore_GetModelPath(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_GetModelCount___")]
  public static extern int EffekseerEffectCore_GetModelCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_LoadModel___")]
  public static extern bool EffekseerEffectCore_LoadModel(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_HasModelLoaded___")]
  public static extern bool EffekseerEffectCore_HasModelLoaded(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_GetMaterialPath___")]
  public static extern System.IntPtr EffekseerEffectCore_GetMaterialPath(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_GetMaterialCount___")]
  public static extern int EffekseerEffectCore_GetMaterialCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_LoadMaterial___")]
  public static extern bool EffekseerEffectCore_LoadMaterial(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_GetCurvePath___")]
  public static extern System.IntPtr EffekseerEffectCore_GetCurvePath(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_HasMaterialLoaded___")]
  public static extern bool EffekseerEffectCore_HasMaterialLoaded(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_GetCurveCount___")]
  public static extern int EffekseerEffectCore_GetCurveCount(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_LoadCurve___")]
  public static extern bool EffekseerEffectCore_LoadCurve(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]byte[] jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_HasCurveLoaded___")]
  public static extern bool EffekseerEffectCore_HasCurveLoaded(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_GetTermMax___")]
  public static extern int EffekseerEffectCore_GetTermMax(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerEffectCore_GetTermMin___")]
  public static extern int EffekseerEffectCore_GetTermMin(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_new_EffekseerManagerCore___")]
  public static extern global::System.IntPtr new_EffekseerManagerCore();

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_delete_EffekseerManagerCore___")]
  public static extern void delete_EffekseerManagerCore(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_InitializeOpenGL__SWIG_0___")]
  public static extern bool EffekseerManagerCore_InitializeOpenGL__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_InitializeOpenGL__SWIG_1___")]
  public static extern bool EffekseerManagerCore_InitializeOpenGL__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_InitializeDX11__SWIG_0___")]
  public static extern bool EffekseerManagerCore_InitializeDX11__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6, bool jarg7);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_InitializeDX11__SWIG_1___")]
  public static extern bool EffekseerManagerCore_InitializeDX11__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5, bool jarg6);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_InitializeDX11__SWIG_2___")]
  public static extern bool EffekseerManagerCore_InitializeDX11__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_InitializeDX11__SWIG_3___")]
  public static extern bool EffekseerManagerCore_InitializeDX11__SWIG_3(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.IntPtr jarg2, global::System.IntPtr jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_Update___")]
  public static extern void EffekseerManagerCore_Update(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_BeginUpdate___")]
  public static extern void EffekseerManagerCore_BeginUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_EndUpdate___")]
  public static extern void EffekseerManagerCore_EndUpdate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_UpdateHandleToMoveToFrame___")]
  public static extern void EffekseerManagerCore_UpdateHandleToMoveToFrame(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_Play___")]
  public static extern int EffekseerManagerCore_Play(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_StopAllEffects___")]
  public static extern void EffekseerManagerCore_StopAllEffects(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_Stop___")]
  public static extern void EffekseerManagerCore_Stop(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetPaused___")]
  public static extern void EffekseerManagerCore_SetPaused(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetShown___")]
  public static extern void EffekseerManagerCore_SetShown(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SendTrigger___")]
  public static extern void EffekseerManagerCore_SendTrigger(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetEffectPosition___")]
  public static extern void EffekseerManagerCore_SetEffectPosition(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetEffectRotation___")]
  public static extern void EffekseerManagerCore_SetEffectRotation(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetEffectScale___")]
  public static extern void EffekseerManagerCore_SetEffectScale(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, float jarg4, float jarg5);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetLayerParameter___")]
  public static extern void EffekseerManagerCore_SetLayerParameter(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetEffectTransformMatrix___")]
  public static extern void EffekseerManagerCore_SetEffectTransformMatrix(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetEffectTransformBaseMatrix___")]
  public static extern void EffekseerManagerCore_SetEffectTransformBaseMatrix(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_DrawBack__SWIG_0___")]
  public static extern void EffekseerManagerCore_DrawBack__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_DrawBack__SWIG_1___")]
  public static extern void EffekseerManagerCore_DrawBack__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_DrawFront__SWIG_0___")]
  public static extern void EffekseerManagerCore_DrawFront__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_DrawFront__SWIG_1___")]
  public static extern void EffekseerManagerCore_DrawFront__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetLayer___")]
  public static extern void EffekseerManagerCore_SetLayer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetCameraParameter___")]
  public static extern void EffekseerManagerCore_SetCameraParameter(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetProjectionMatrix___")]
  public static extern void EffekseerManagerCore_SetProjectionMatrix(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16, float jarg17);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetCameraMatrix___")]
  public static extern void EffekseerManagerCore_SetCameraMatrix(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16, float jarg17);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_Exists___")]
  public static extern bool EffekseerManagerCore_Exists(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetViewProjectionMatrixWithSimpleWindow___")]
  public static extern void EffekseerManagerCore_SetViewProjectionMatrixWithSimpleWindow(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetDynamicInput___")]
  public static extern void EffekseerManagerCore_SetDynamicInput(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, float jarg4);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_GetDynamicInput___")]
  public static extern float EffekseerManagerCore_GetDynamicInput(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_LaunchWorkerThreads___")]
  public static extern void EffekseerManagerCore_LaunchWorkerThreads(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetBackground___")]
  public static extern void EffekseerManagerCore_SetBackground(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_UnsetBackground___")]
  public static extern void EffekseerManagerCore_UnsetBackground(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_SetDepth___")]
  public static extern void EffekseerManagerCore_SetDepth(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, bool jarg3);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_UnsetDepth___")]
  public static extern void EffekseerManagerCore_UnsetDepth(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_GetInstanceCount___")]
  public static extern int EffekseerManagerCore_GetInstanceCount(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("EffekseerNativeForCSharp", EntryPoint="CSharp_Effekseerfswig_EffekseerManagerCore_GetTotalInstanceCount___")]
  public static extern int EffekseerManagerCore_GetTotalInstanceCount(global::System.Runtime.InteropServices.HandleRef jarg1);
}

}
