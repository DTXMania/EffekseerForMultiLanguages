//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Effekseer.swig {

public class Vector3D : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vector3D(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Vector3D obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Vector3D obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Vector3D() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EffekseerCore2PINVOKE.delete_Vector3D(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public float X {
    set {
      EffekseerCore2PINVOKE.Vector3D_X_set(swigCPtr, value);
    } 
    get {
      float ret = EffekseerCore2PINVOKE.Vector3D_X_get(swigCPtr);
      return ret;
    } 
  }

  public float Y {
    set {
      EffekseerCore2PINVOKE.Vector3D_Y_set(swigCPtr, value);
    } 
    get {
      float ret = EffekseerCore2PINVOKE.Vector3D_Y_get(swigCPtr);
      return ret;
    } 
  }

  public float Z {
    set {
      EffekseerCore2PINVOKE.Vector3D_Z_set(swigCPtr, value);
    } 
    get {
      float ret = EffekseerCore2PINVOKE.Vector3D_Z_get(swigCPtr);
      return ret;
    } 
  }

  public Vector3D() : this(EffekseerCore2PINVOKE.new_Vector3D__SWIG_0(), true) {
  }

  public Vector3D(float x, float y, float z) : this(EffekseerCore2PINVOKE.new_Vector3D__SWIG_1(x, y, z), true) {
  }

  public static void Add(Vector3D pOut, Vector3D pIn1, Vector3D pIn2) {
    EffekseerCore2PINVOKE.Vector3D_Add(Vector3D.getCPtr(pOut), Vector3D.getCPtr(pIn1), Vector3D.getCPtr(pIn2));
  }

  public static Vector3D Sub(Vector3D o, Vector3D in1, Vector3D in2) {
    Vector3D ret = new Vector3D(EffekseerCore2PINVOKE.Vector3D_Sub(Vector3D.getCPtr(o), Vector3D.getCPtr(in1), Vector3D.getCPtr(in2)), false);
    if (EffekseerCore2PINVOKE.SWIGPendingException.Pending) throw EffekseerCore2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Length(Vector3D in_) {
    float ret = EffekseerCore2PINVOKE.Vector3D_Length(Vector3D.getCPtr(in_));
    if (EffekseerCore2PINVOKE.SWIGPendingException.Pending) throw EffekseerCore2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float LengthSq(Vector3D in_) {
    float ret = EffekseerCore2PINVOKE.Vector3D_LengthSq(Vector3D.getCPtr(in_));
    if (EffekseerCore2PINVOKE.SWIGPendingException.Pending) throw EffekseerCore2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Dot(Vector3D in1, Vector3D in2) {
    float ret = EffekseerCore2PINVOKE.Vector3D_Dot(Vector3D.getCPtr(in1), Vector3D.getCPtr(in2));
    if (EffekseerCore2PINVOKE.SWIGPendingException.Pending) throw EffekseerCore2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Normal(Vector3D o, Vector3D in_) {
    EffekseerCore2PINVOKE.Vector3D_Normal(Vector3D.getCPtr(o), Vector3D.getCPtr(in_));
    if (EffekseerCore2PINVOKE.SWIGPendingException.Pending) throw EffekseerCore2PINVOKE.SWIGPendingException.Retrieve();
  }

  public static Vector3D Cross(Vector3D o, Vector3D in1, Vector3D in2) {
    Vector3D ret = new Vector3D(EffekseerCore2PINVOKE.Vector3D_Cross(Vector3D.getCPtr(o), Vector3D.getCPtr(in1), Vector3D.getCPtr(in2)), false);
    if (EffekseerCore2PINVOKE.SWIGPendingException.Pending) throw EffekseerCore2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3D Transform(Vector3D o, Vector3D in_, Matrix43 mat) {
    Vector3D ret = new Vector3D(EffekseerCore2PINVOKE.Vector3D_Transform__SWIG_0(Vector3D.getCPtr(o), Vector3D.getCPtr(in_), Matrix43.getCPtr(mat)), false);
    if (EffekseerCore2PINVOKE.SWIGPendingException.Pending) throw EffekseerCore2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3D Transform(Vector3D o, Vector3D in_, Matrix44 mat) {
    Vector3D ret = new Vector3D(EffekseerCore2PINVOKE.Vector3D_Transform__SWIG_1(Vector3D.getCPtr(o), Vector3D.getCPtr(in_), Matrix44.getCPtr(mat)), false);
    if (EffekseerCore2PINVOKE.SWIGPendingException.Pending) throw EffekseerCore2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3D TransformWithW(Vector3D o, Vector3D in_, Matrix44 mat) {
    Vector3D ret = new Vector3D(EffekseerCore2PINVOKE.Vector3D_TransformWithW(Vector3D.getCPtr(o), Vector3D.getCPtr(in_), Matrix44.getCPtr(mat)), false);
    if (EffekseerCore2PINVOKE.SWIGPendingException.Pending) throw EffekseerCore2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__arrayT_float_4_t ToFloat4() {
    SWIGTYPE_p_std__arrayT_float_4_t ret = new SWIGTYPE_p_std__arrayT_float_4_t(EffekseerCore2PINVOKE.Vector3D_ToFloat4(swigCPtr), true);
    return ret;
  }

}

}
