//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Effekseer.swig {

public class Matrix43 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Matrix43(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Matrix43 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Matrix43 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Matrix43() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EffekseerCorePINVOKE.delete_Matrix43(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_a_3__float Value {
    set {
      EffekseerCorePINVOKE.Matrix43_Value_set(swigCPtr, SWIGTYPE_p_a_3__float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = EffekseerCorePINVOKE.Matrix43_Value_get(swigCPtr);
      SWIGTYPE_p_a_3__float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_a_3__float(cPtr, false);
      return ret;
    } 
  }

  public void Indentity() {
    EffekseerCorePINVOKE.Matrix43_Indentity(swigCPtr);
  }

  public void Scaling(float x, float y, float z) {
    EffekseerCorePINVOKE.Matrix43_Scaling(swigCPtr, x, y, z);
  }

  public void RotationX(float angle) {
    EffekseerCorePINVOKE.Matrix43_RotationX(swigCPtr, angle);
  }

  public void RotationY(float angle) {
    EffekseerCorePINVOKE.Matrix43_RotationY(swigCPtr, angle);
  }

  public void RotationZ(float angle) {
    EffekseerCorePINVOKE.Matrix43_RotationZ(swigCPtr, angle);
  }

  public void RotationXYZ(float rx, float ry, float rz) {
    EffekseerCorePINVOKE.Matrix43_RotationXYZ(swigCPtr, rx, ry, rz);
  }

  public void RotationZXY(float rz, float rx, float ry) {
    EffekseerCorePINVOKE.Matrix43_RotationZXY(swigCPtr, rz, rx, ry);
  }

  public void RotationAxis(Vector3D axis, float angle) {
    EffekseerCorePINVOKE.Matrix43_RotationAxis__SWIG_0(swigCPtr, Vector3D.getCPtr(axis), angle);
    if (EffekseerCorePINVOKE.SWIGPendingException.Pending) throw EffekseerCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RotationAxis(Vector3D axis, float s, float c) {
    EffekseerCorePINVOKE.Matrix43_RotationAxis__SWIG_1(swigCPtr, Vector3D.getCPtr(axis), s, c);
    if (EffekseerCorePINVOKE.SWIGPendingException.Pending) throw EffekseerCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Translation(float x, float y, float z) {
    EffekseerCorePINVOKE.Matrix43_Translation(swigCPtr, x, y, z);
  }

  public void GetSRT(Vector3D s, Matrix43 r, Vector3D t) {
    EffekseerCorePINVOKE.Matrix43_GetSRT(swigCPtr, Vector3D.getCPtr(s), Matrix43.getCPtr(r), Vector3D.getCPtr(t));
    if (EffekseerCorePINVOKE.SWIGPendingException.Pending) throw EffekseerCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetScale(Vector3D s) {
    EffekseerCorePINVOKE.Matrix43_GetScale(swigCPtr, Vector3D.getCPtr(s));
    if (EffekseerCorePINVOKE.SWIGPendingException.Pending) throw EffekseerCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetRotation(Matrix43 r) {
    EffekseerCorePINVOKE.Matrix43_GetRotation(swigCPtr, Matrix43.getCPtr(r));
    if (EffekseerCorePINVOKE.SWIGPendingException.Pending) throw EffekseerCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetTranslation(Vector3D t) {
    EffekseerCorePINVOKE.Matrix43_GetTranslation(swigCPtr, Vector3D.getCPtr(t));
    if (EffekseerCorePINVOKE.SWIGPendingException.Pending) throw EffekseerCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSRT(Vector3D s, Matrix43 r, Vector3D t) {
    EffekseerCorePINVOKE.Matrix43_SetSRT(swigCPtr, Vector3D.getCPtr(s), Matrix43.getCPtr(r), Vector3D.getCPtr(t));
    if (EffekseerCorePINVOKE.SWIGPendingException.Pending) throw EffekseerCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ToMatrix44(Matrix44 dst) {
    EffekseerCorePINVOKE.Matrix43_ToMatrix44(swigCPtr, Matrix44.getCPtr(dst));
    if (EffekseerCorePINVOKE.SWIGPendingException.Pending) throw EffekseerCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsValid() {
    bool ret = EffekseerCorePINVOKE.Matrix43_IsValid(swigCPtr);
    return ret;
  }

  public static void Multiple(Matrix43 out_, Matrix43 in1, Matrix43 in2) {
    EffekseerCorePINVOKE.Matrix43_Multiple(Matrix43.getCPtr(out_), Matrix43.getCPtr(in1), Matrix43.getCPtr(in2));
    if (EffekseerCorePINVOKE.SWIGPendingException.Pending) throw EffekseerCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix43() : this(EffekseerCorePINVOKE.new_Matrix43(), true) {
  }

}

}
